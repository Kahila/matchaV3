"use strict";
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done
                    ? resolve(result.value)
                    : new P(function (resolve) {
                          resolve(result.value);
                      }).then(fulfilled, rejected);
            }
            step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
            );
        });
    };
var __generator =
    (this && this.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: []
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === "function" &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (
                        ((f = 1),
                        y &&
                            (t =
                                op[0] & 2
                                    ? y["return"]
                                    : op[0]
                                    ? y["throw"] ||
                                      ((t = y["return"]) && t.call(y), 0)
                                    : y.next) &&
                            !(t = t.call(y, op[1])).done)
                    )
                        return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (
                                !((t = _.trys),
                                (t = t.length > 0 && t[t.length - 1])) &&
                                (op[0] === 6 || op[0] === 2)
                            ) {
                                _ = 0;
                                continue;
                            }
                            if (
                                op[0] === 3 &&
                                (!t || (op[1] > t[0] && op[1] < t[3]))
                            ) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
var __importStar =
    (this && this.__importStar) ||
    function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var dotenv = __importStar(require("dotenv"));
var ipinfoWrapper_1 = __importDefault(require("../ipinfoWrapper"));
var ipinfoWrapper;
beforeEach(function () {
    dotenv.config();
    var token = process.env.IPINFO_TOKEN || "";
    ipinfoWrapper = new ipinfoWrapper_1.default(token);
});
describe("IPinfoWrapper", function () {
    var ip = "8.8.8.8";
    var asn = "AS7922";
    test("lookupIp", function () {
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [
                    2,
                    ipinfoWrapper.lookupIp(ip).then(function (data) {
                        expect(data.ip).toEqual("8.8.8.8");
                        expect(data.hostname).toEqual("dns.google");
                        expect(data.city).toEqual("Mountain View");
                        expect(data.region).toEqual("California");
                        expect(data.country).toEqual("United States");
                        expect(data.countryCode).toEqual("US");
                        expect(data.loc).toEqual("37.4056,-122.0775");
                        expect(data.postal).toEqual("94043");
                        expect(data.timezone).toEqual("America/Los_Angeles");
                        expect(data.asn).toEqual({
                            asn: "AS15169",
                            name: "Google LLC",
                            domain: "google.com",
                            route: "8.8.8.0/24",
                            type: "business"
                        });
                        expect(data.company).toEqual({
                            name: "Google LLC",
                            domain: "google.com",
                            type: "business"
                        });
                        expect(data.privacy).toEqual({
                            vpn: false,
                            proxy: false,
                            tor: false,
                            hosting: false
                        });
                        expect(data.abuse).toEqual({
                            address:
                                "US, CA, Mountain View, 1600 Amphitheatre Parkway, 94043",
                            country: "United States",
                            countryCode: "US",
                            email: "network-abuse@google.com",
                            name: "Abuse",
                            network: "8.8.8.0/24",
                            phone: "+1-650-253-0000"
                        });
                        expect(data.domains).toEqual({
                            ip: "8.8.8.8",
                            total: 12988,
                            domains: [
                                "41.cn",
                                "vrswebapps.com",
                                "etempurl.com",
                                "mtqnia.com",
                                "iptvx.tv"
                            ]
                        });
                    })
                ];
            });
        });
    });
    test("lookupASN", function () {
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [
                    2,
                    ipinfoWrapper.lookupASN(asn).then(function (data) {
                        expect(data.asn).toEqual("AS7922");
                        expect(data.name).toEqual(
                            "Comcast Cable Communications, LLC"
                        );
                        expect(data.country).toEqual("United States");
                        expect(data.countryCode).toEqual("US");
                        expect(data.allocated).toEqual("1997-02-14");
                        expect(data.registry).toEqual("arin");
                        expect(data.domain).toEqual("comcast.com");
                        expect(data.num_ips).toEqual(71324416);
                        expect(data.type).toEqual("isp");
                    })
                ];
            });
        });
    });
});
