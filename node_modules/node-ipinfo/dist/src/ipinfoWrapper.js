"use strict";
var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var en_US_json_1 = __importDefault(require("../config/en_US.json"));
var lruCache_1 = __importDefault(require("./cache/lruCache"));
exports.LruCache = lruCache_1.default;
var common_1 = require("./common");
var IPinfoWrapper = (function () {
    function IPinfoWrapper(token, cache) {
        this.limitErrorMessage =
            "You have exceeded 50,000 requests a month. Visit https://ipinfo.io/account to see your API limits.";
        this.token = token;
        this.countries = en_US_json_1.default;
        this.cache = cache ? cache : new lruCache_1.default();
    }
    IPinfoWrapper.prototype.lookupIp = function (ip) {
        var _this = this;
        var data = this.cache.get(ip);
        if (data) {
            return new Promise(function (resolve) {
                resolve(data);
            });
        }
        var url = common_1.FQDN + "/" + ip;
        var config = {
            headers: {
                Accept: "application/json",
                Authorization: "Bearer " + this.token,
                "Content-Type": "application/json",
                "User-Agent": "IPinfoClient/nodejs/2.0.0"
            },
            method: "get",
            url: "" + url
        };
        return new Promise(function (resolve, reject) {
            axios_1
                .default(config)
                .then(function (response) {
                    var ipinfo = response.data;
                    if (ipinfo.country) {
                        ipinfo.countryCode = ipinfo.country;
                        ipinfo.country = _this.countries[ipinfo.countryCode];
                    }
                    if (ipinfo.abuse && ipinfo.abuse.country) {
                        ipinfo.abuse.countryCode = ipinfo.abuse.country;
                        ipinfo.abuse.country =
                            _this.countries[ipinfo.abuse.countryCode];
                    }
                    _this.cache.set(ip, ipinfo);
                    resolve(ipinfo);
                })
                .catch(function (error) {
                    if (error.response && error.response.status === 429) {
                        throw new Error(_this.limitErrorMessage);
                    }
                    reject(error);
                });
        });
    };
    IPinfoWrapper.prototype.lookupASN = function (asn) {
        var _this = this;
        var data = this.cache.get(asn);
        if (data) {
            return new Promise(function (resolve) {
                resolve(data);
            });
        }
        var url = common_1.FQDN + "/" + asn + "/json";
        var config = {
            headers: {
                Accept: "application/json",
                Authorization: "Bearer " + this.token,
                "Content-Type": "application/json",
                "User-Agent": "IPinfoClient/nodejs/2.0.0"
            },
            method: "get",
            url: "" + url
        };
        return new Promise(function (resolve, reject) {
            axios_1
                .default(config)
                .then(function (response) {
                    var asnResp = response.data;
                    if (asnResp.country) {
                        asnResp.countryCode = asnResp.country;
                        asnResp.country = _this.countries[asnResp.countryCode];
                    }
                    _this.cache.set(asn, asnResp);
                    resolve(asnResp);
                })
                .catch(function (error) {
                    if (error.response && error.response.status === 429) {
                        reject(Error(_this.limitErrorMessage));
                    }
                    reject(error);
                });
        });
    };
    return IPinfoWrapper;
})();
exports.default = IPinfoWrapper;
